PythonLearning

Dynamicly typed,  variables can change type,  no type needed before variable declaration

def func(param names):
	indent defines block

flow of execution,  function must be previously defined,  no main(), script read from top to bottom

elif = elseif

0 = False, allelse = True
False,True, type bool


raw_input() keyboard input
raw_input('prompt\n')   display prompt and newline
typecast from string

no semicolons,  one statement per line, \ extends a line,  

: begins a block
	def:
	if:
	while:

strings are immutable
strings are char seris,  fruit='banana'  print fruit[1] <<< a
string slices   fruit[1:3] = ana,   fruit[4:] = 'na'
in operator,  a in fruit <<< True,   band in fruit <<< False
strings can be compared with == and < >
.split() creates list of space delimited words
.split(delimiter)

join creates a string from a list, with delimiter char inserted between, called on delimiter with list as paramaters
delimiter = ' '
delimiter.join(ls)


empty list declaration - []
lists are mutable
+ concantenates lists
* repeats a list a given number of times
list = [0] * n    creates an initialized to 0 list of n size
list slices list[a:b]  including a, excluding b  [a,b)
list[1:3] = [x,y]

List comprehension
expr FOR var IN list,  returns a list where expr was evaluated on all items
[x/2 for x in [4,5,6]]  :: [2,2.5,3.0]
conditions  [x for x in nums if x%2==1]   filtering
condition with expr  [x*x for x in nums if x>5]
with else
>>> [a if a else 2 for a in [0,1,0,3]]
[2, 1, 2, 3]


range(n)  returns a list of ints from 0 to n-1
eg range(len(list))

list methods  list.
	append
	extend(list) appends all items in list paramater
	sort
	pop(i)  removes and returns item no param pops index 0
	remove(element)

not dot methods
del list[i]
sum list  (returns sum of all elements)



is operater
	check if two variables point to same object (boolean return (a is b))
in operator(contains)
	item in list  t/f


list.sort() vs sorted(list)
sorted(list) returns new list
optional args  key=(1 arg function that returns value) makes a shadow list
list of strings sorted by length
	a = sorted(a,key=len)
cpm = for 2 arg function,  reverse=True to sort backward

print item,   trailing comma omits return line


open(‘’) opens file returns file object
for line in f:   iterates over string of one line at a time in file
file.readlines()  returns a list of all lines in file
file.read()   reads entire file into one string


usfull modules:
	itertools
	collections

itertools.permutation(lst) returns list containing all perms
itertools.combinations(lst) returns list of all combinations


It does short circut && ||


*list  will unpack the list,  can be used to call a function from a list of args
point = [x,y]
def drawpoint(x,y)
drawpoint(*point)

all(lst), any(lst)   return T/F for &&,&&,&&   ||,||,||

iterator next(iter) throws exception at end
next(iter,default_value)  is an alternative

you can add fields to an instance of a class

conditions can be chained
a < b < c   if B>=a && B<c

global variables can be accesed in a function
but to be modified there must be
	global var_name
preceding the assignment



for is evaled as True if it completes
else will execute if for loop completed without break
for:, if:break,  else: (esle = if break)
for x in range(i):
	if a==b: break
else: print "we did not break"

loop idioms

backwards:
    for item in reversed(list)
with index
    for i,item in enumerate(list)

for ------
    break
else (no break)


for k,v in dict.iteritems():

namedtuple
nt = namedtuple('name',['fieldname','fieldname'])

tupple unpack
b = (brandon,29,male)
name, age, sex = b

use tuple unpacking and packing to update states simultaneously
fibinaci(n):
    x,y = 0,1
    for i in range(n):
          print x
          x,y = y, x+y

# Generator expression     creates an iterable instead of a new object
(x*2 for x in range(256))

# List comprehension
[x*2 for x in range(256)]

	
